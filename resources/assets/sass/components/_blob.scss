$home-visual-size: 40rem;
$home-mobile-visual-size: 25rem;

$home-blob-length: 8;
$home-blob-duration: 5s;

$home-explosion-base-size: 20rem;
$home-explosion-desired-size: 60rem;
$home-explosion-multiplier: $home-explosion-desired-size / $home-explosion-base-size;
$home-explosion-frames: 12;

$home-image-size: 80vw;
$home-image-max-size: 40rem;


@function randomNum($min, $max) {
  $rand: random();
  $randomNum: $min + floor($rand * (($max - $min) + 1));
  @return $randomNum;
}



.home-header-visual {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: $home-visual-size;
  height: $home-visual-size;
  margin: auto;
  cursor: pointer;

  @include breakpoint(medium down) {
    transform: translate(-50%, -50%) scale(0.66);
  }

  .dark & {
    opacity: 0.5;
  }
  &-svg-wrap {
    position: relative;
    z-index: 1;
    width: $home-visual-size;
    height: $home-visual-size;
    transition: all 0.5s cubic-bezier(0.3, 1.65, 0.205, 0.795);
    animation-name: huerotate;
    animation-duration: 2.5s;
    animation-timing-function: linear;
    animation-iteration-count: infinite;
    animation-fill-mode: both;
    animation-play-state: paused;
  }

  &:hover .home-header-visual-svg-wrap {
    animation-play-state: running;
  }
  &.hidden .home-header-visual-svg-wrap {
    transition: all 0.15s ease-in;
    transform: scale(0);
  }

  svg {
    width: 100%;
    height: 100%;
    max-height: 100vh;
    animation: rotate 40s linear;
  }

  circle {
    stroke-width: 20px;
    fill: none;
    mix-blend-mode: multiply;
  }

  $left-collection: 1%, -1%, -2%;
  $top-collection: 2%, -1%, 2%;
  $size-collection: 148px, 141px, 149px;
  $color-collection: $azure, $watermelon, $yellow;

  /*
    The following function creates random values for size and offset.
    Uncomment if you want something new and crazyyyy ðŸ¤©ðŸ¤©ðŸ¤©

    $top-collection: [];
    $left-collection: [];
    $size-collection: [];

    @for $i from 1 to 20 {
      $randWH: randomNum(140px, 150px);
      $offset: $randWH;
      $left: randomNum(-4%, 4%);
      $top: randomNum(-4%, 4%);
      $left-collection: append($left-collection, $left);
      $top-collection: append($top-collection, $top);
      $size-collection: append($size-collection, $randWH)
    }
  */

  @for $i from 1 to 4 {
    circle:nth-child(#{$i}) {
      cx: 51%;
      cy: 50%;
      r: nth($size-collection, $i);
      stroke: nth($color-collection, $i);
      animation: blob-circle-#{$i} $home-blob-duration ease-in-out infinite;
    }
    @keyframes blob-circle-#{$i}  {
      0% {
        transform: translate(0, 0)
      }
      50% {
        transform: translate(nth($left-collection, $i), nth($top-collection, $i))
      }
      100% {
        transform: translate(0, 0)
      }
    }
  }
}

.home-header {
  &-background {
    background: $base-bg-color-light;
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 0;
    pointer-events: none;
    @include transition(sm);
    animation: huerotate 20s linear infinite;

    .dark & {
      background-color: $watermelon;
    }
  }
  &-explosion {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: $home-explosion-base-size * $home-explosion-multiplier;
    height: $home-explosion-base-size * $home-explosion-multiplier;
    background: url('../img/visuals/explosion-sprite.svg') left;
    background-size: $home-explosion-desired-size * ($home-explosion-frames + 1) $home-explosion-desired-size;
    animation: none;
    &.show {
      animation: explode 0.85s steps($home-explosion-frames);
      animation-delay: 0.15s;
    }
  }
  &-image {
    animation: huerotate 20s linear infinite;
    position: absolute;
    top: 50%;
    left: 50%;
    width: $home-image-size;
    height: $home-image-size;
    max-width: $home-image-max-size;
    max-height: $home-image-max-size;
    opacity: 0;
    transform: translate(-50%, -50%) scale(0.85);
    background: url('../img/visuals/retro-screen-glitch.gif') no-repeat;
    background-size: contain;
    background-position: center;
    transition: all 0.5s cubic-bezier(0.3, 1.65, 0.205, 0.795);
    &.show {
      opacity: 1;
      transform: translate(-50%, -50%) scale(1);
    }
  }
}


@keyframes explode {
  100% {
    background-position: -$home-explosion-desired-size * $home-explosion-frames;
  }
}
@keyframes rotate {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@keyframes huerotate {
  0%{filter: hue-rotate(0deg);}
  100%{filter: hue-rotate(360deg);}
}

$studio-visual-width: 45rem;
$studio-visual-mobile-width: 30rem;

$studio-blob-size-sm: 13rem;
$studio-blob-size-lg: 18rem;
$studio-blob-size-delta: $studio-blob-size-lg - $studio-blob-size-sm;

.studio-portfolio {
  svg {
    position: absolute;
  }
  &-visual {
    position: relative;
    margin: 10rem auto;
    width: $studio-visual-width;
    height: $studio-blob-size-lg;
    @include breakpoint(medium down) {
      width: $studio-visual-mobile-width;
    }
    &:hover {
      color: rgba($base-font-color-light, 0.33);
    }
  }

  &-blob,
  &-circles,
  &-circles-bg {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;

    span {
      display: block;
      position: absolute;
      border-radius: 50%;
      @include transition('lg', $easing: ease-out);
      transition-property: transform;
      will-change: transform;
    }
  }
  &-blob {
    filter: url('#goo');
    opacity: 0.66;
    span {
      height: $studio-blob-size-sm;
      width: $studio-blob-size-sm;
      background: $black;
      box-shadow: 0px 0px $studio-blob-size-sm/4 $black;
      @include breakpoint(medium down) {
        transform: scale(0.75);
      }
      &:nth-of-type(1) {
        left: $studio-blob-size-delta / 2;
        top: $studio-blob-size-delta / 2;
      }
      &:nth-of-type(2) {
        left: calc(50% - #{$studio-blob-size-sm}/2);
        top: $studio-blob-size-delta / 2;
      }
      &:nth-of-type(3) {
        right: $studio-blob-size-delta / 2;
        top: $studio-blob-size-delta / 2;
      }
    }
  }
  &-circles {
    span {
      height: $studio-blob-size-lg;
      width: $studio-blob-size-lg;
      background: rgba($black, 0.25);
      display: flex;
      @include breakpoint(medium down) {
        transform: scale(0.75);
      }
      &::after {
        content: '';
        display: block;
        width: 0.5rem;
        height: 0.5rem;
        margin: auto;
        border-radius: 50%;
        border: 1px solid $light-gray;
        @include transition(md);
      }

      label {
        display: block;
        position: absolute;
        bottom: -10rem;
        left: 50%;
        transform: translateX(-50%);
        color: inherit;
        @include transition(md);
      }
      &:nth-of-type(1) {
        left: 0;
      }
      &:nth-of-type(2) {
        left: calc(50% - #{$studio-blob-size-lg}/2);
      }
      &:nth-of-type(3) {
        right: 0;
      }

      &:hover {
        background: rgba($black, 0.4);
        color: $base-font-color-light;
        &::after {
          background-color: $light-gray;
          transform: scale(1.5);
        }
      }
    }
  }
  &-circles-bg {
    pointer-events: none;
    display: flex;
    align-items: center;
    span {
      position: absolute;
    }
    :nth-child(1),
    :nth-child(4) {
      height: $studio-blob-size-lg * 0.5;
      width: $studio-blob-size-lg * 0.5;
      background: rgba($black, 0.1);
    }
    :nth-child(2),
    :nth-child(3) {
      height: $studio-blob-size-lg * 0.75;
      width: $studio-blob-size-lg * 0.75;
      background: rgba($black, 0.175);
    }
    :nth-child(1) {
      left: -150px;
    }
    :nth-child(2) {
      left: -75px;
    }
    :nth-child(3) {
      right: -75px;
    }
    :nth-child(4) {
      right: -150px;
    }
  }
}
